stages:
  - build
  - integrationTest
  - openMr
  - retagging
  - deploy

# The build tasks are all exactly the same in all services
build:
  stage: build
  image: amirabdi/docker:19.03.7-git-awscli2
  services:
    - docker:18.09.7-dind
  before_script:
    - aws configure set region us-west-2
    - aws configure set aws_access_key_id $AWS_REGISTRY_ID
    - aws configure set aws_secret_access_key $AWS_REGISTRY_SECRET
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI_BASE
  script:
    - echo "Building the image"
    - export TAG_NAME=$CI_COMMIT_REF_SLUG-`git show -s --format=%ct HEAD`-`git rev-parse --short=8 HEAD`
    - echo $TAG_NAME
    - docker build -t $ECR_URI_BASE/offerland/$SERVICE_NAME:$TAG_NAME -t $ECR_URI_BASE/offerland/$SERVICE_NAME:$CI_COMMIT_REF_SLUG-latest .
    - echo "Push image to AWS ECR as $ECR_URI_BASE/offerland/$SERVICE_NAME"
    - docker push $ECR_URI_BASE/offerland/$SERVICE_NAME:$TAG_NAME
    - docker push $ECR_URI_BASE/offerland/$SERVICE_NAME:$CI_COMMIT_REF_SLUG-latest
  only:
    - development

Integration Test:
  stage: integrationTest
  variables:
    UPSTREAM_SERVICE_NAME: $SERVICE_NAME
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
  trigger: 
    project: offerland/root
    strategy: depend

# The Open Merge Request tasks are all exactly the same in all services
Open Merge Request:
  stage: openMr
  image: amirabdi/gitlab-auto-merge-request:1.1
  before_script: []
  variables:
    TARGET_BRANCH: staging
    GIT_STRATEGY: none # We do not need a clone of the GIT repository to create a Merge Request
  only:
    - development
  script:
    - bash merge-request.sh

retag:
  stage: retagging
  image: amirabdi/docker:19.03.7-git-awscli2
  before_script:
    - aws configure set region us-west-2
    - aws configure set aws_access_key_id $AWS_REGISTRY_ID
    - aws configure set aws_secret_access_key $AWS_REGISTRY_SECRET
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI_BASE
  script:
    - export TAG_NAME=development-`git show -s --format=%ct HEAD`-`git rev-parse --short=8 HEAD`
    - echo $TAG_NAME
    - echo "Retagging development image as staging/master"
    - MANIFEST=$(aws ecr batch-get-image --repository-name offerland/$SERVICE_NAME --image-ids imageTag=$TAG_NAME --query 'images[].imageManifest' --output text)
    - aws ecr put-image --repository-name offerland/$SERVICE_NAME --image-tag $CI_COMMIT_REF_SLUG-latest --image-manifest "$MANIFEST"
  only:
    - staging
    - master

# Hit the staging webhook to replace the image
deploy:
  stage: deploy
  image: alpine
  script:
    - apk add --update curl
    - curl -XPOST $STAGING_WEBHOOK
  only:
    - staging
    - master
